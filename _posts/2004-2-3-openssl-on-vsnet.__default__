--- 
title: OpenSSL on VS.NET
mt_id: 22
layout: post
date: 2004-02-03 20:54:36 +00:00
---
I know how to build OpenSSL on Visual Studio .NET!!! So can you.

Ingredients:

One Windows machine with VS.NET (my version is 2002, a.k.a. 7.0)
One Linux machine (mine is Fedora Core 1)
One tarball of <a href="http://www.openssl.org/source/">OpenSSL 0.9.7c</a>. 
<ol>
<li>Untar on the Windows machine to somewhere.</li>
<li>If you want to build with MASM or NASM, follow the instructions in INSTALL.W32 at least all the way up to the part where you run ms\do_nasm.bat or ms\do_masm.bat. If you're building the straight C version, skip this step.</li>
<li>Untar on the Linux machine to somewhere.</li>
<li>On Linux, in the openssl directory you just untarred:
<ol>
<li>perl Configure VC-WIN32</li>
<li>cd ms/</li>
<li>tr -d '\15\32' < do_ms.bat > build.tmp (or do_masm.bat or do_nasm.bat)</li>
<li>tr '\\' '/' < build.tmp > build_mak.sh</li>
<li>chmod +x build_mak.sh</li>
<li>cd ..</li>
<li>./ms/build_mak.sh</li>
</ol>
</li>
<li>Copy ms/*.mak and ms/*.def to the Windows machine's openssl-0.9.7c\ms directory, overwriting the existing files already in that directory.</li>
<li>On the Windows machine:
<ol>
<li>Find vsvars32.bat, which should be in C:\Program Files\Microsoft Visual Studio .NET\Common7\Tools. Copy that file to your openssl directory (this step isn't completely necessary but it makes things easier later).</li>
<li>Open a DOS prompt (NOT a Cygwin shell!).</li>
<li>cd to your openssl directory.</li>
<li>run vsvars32.bat.</li>
<li>Now, nmake -f ms\ntdll.mak (or whichever you want).</li>
</ol>
</li>
</ol>

It should now build according to the instructions in INSTALL.W32 (with stuff ending up in the out32 or out32dll directory). OpenSSL's build scripts on Windows seem to have CRLF problems. Based on this, I'm sure it's possible to build without the Linux step. But this worked for me, and now I have a working OpenSSL binary for Windows!
